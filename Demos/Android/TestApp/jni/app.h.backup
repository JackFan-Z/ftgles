#ifndef APP_H_INCLUDED
#define APP_H_INCLUDED
#include <jni.h>
#include <sys/time.h>
#include <time.h>
#include <android/log.h>
#include <stdint.h>
//#include "FTGL/ftgles.h"
//#include <GLES/gl.h>
//#include "test.h"

#ifdef __cplusplus
extern "C" {
#endif

#define WINDOW_DEFAULT_WIDTH    640
#define WINDOW_DEFAULT_HEIGHT   480

#define WINDOW_BPP              16

static long
_getTime(void);

/* Call to initialize the graphics state */
JNIEXPORT void JNICALL
Java_com_example_TestApp_DemoRenderer_nativeInit( JNIEnv*  env );

JNIEXPORT void JNICALL
Java_com_example_TestApp_DemoRenderer_nativeResize( JNIEnv*  env, jobject  thiz, jint w, jint h );

/* Call to finalize the graphics state */
JNIEXPORT void JNICALL
Java_com_example_TestApp_DemoRenderer_nativeDone( JNIEnv*  env );

/* This is called to indicate to the render loop that it should
 * stop as soon as possible.
 */
JNIEXPORT void JNICALL
Java_com_example_TestApp_DemoGLSurfaceView_nativePause( JNIEnv*  env );

/* Call to render the next GL frame */
JNIEXPORT void JNICALL
Java_com_example_TestApp_DemoRenderer_nativeRender( JNIEnv*  env );




// The simple framework expects the application code to define these functions.
extern void appInit();
extern void appDeinit();
extern void appRender(long tick, int width, int height);

/* Value is non-zero when application is alive, and 0 when it is closing.
 * Defined by the application framework.
 */
extern int gAppAlive;


#ifdef __cplusplus
};
#endif


#endif // !APP_H_INCLUDED
